import*as THREE from"three";import*as dat from"lil-gui";import{OrbitControls}from"three/examples/jsm/controls/OrbitControls.js";import{GLTFLoader}from"three/examples/jsm/loaders/GLTFLoader.js";const gui=new dat.GUI,sizes={width:window.innerWidth,height:window.innerHeight},_VS="\nuniform float pointMultiplier;\n\nattribute float size;\nattribute float angle;\nattribute vec4 colour;\n\nvarying vec4 vColour;\nvarying vec2 vAngle;\n\nvoid main() {\n  vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n\n  gl_Position = projectionMatrix * mvPosition;\n  gl_PointSize = size * pointMultiplier / gl_Position.w;\n\n  vAngle = vec2(cos(angle), sin(angle));\n  vColour = colour;\n}",_FS="\n\nuniform sampler2D diffuseTexture;\n\nvarying vec4 vColour;\nvarying vec2 vAngle;\n\nvoid main() {\n  vec2 coords = (gl_PointCoord - 0.5) * mat2(vAngle.x, vAngle.y, -vAngle.y, vAngle.x) + 0.5;\n  gl_FragColor = texture2D(diffuseTexture, coords) * vColour;\n}";class LinearSpline{constructor(t){this._points=[],this._lerp=t}AddPoint(t,e){this._points.push([t,e])}Get(t){let e=0;for(let i=0;i<this._points.length&&!(this._points[i][0]>=t);i++)e=i;const i=Math.min(this._points.length-1,e+1);return e==i?this._points[e][1]:this._lerp((t-this._points[e][0])/(this._points[i][0]-this._points[e][0]),this._points[e][1],this._points[i][1])}}class ParticleSystem{constructor(t){const e={diffuseTexture:{value:(new THREE.TextureLoader).load("/models/fire/fire.png")},pointMultiplier:{value:window.innerHeight/(2*Math.tan(30*Math.PI/180))}};this._material=new THREE.ShaderMaterial({uniforms:e,vertexShader:_VS,fragmentShader:_FS,blending:THREE.AdditiveBlending,depthTest:!0,depthWrite:!1,transparent:!0,vertexColors:!0}),this._camera=t.camera,this._particles=[],this._geometry=new THREE.BufferGeometry,this._geometry.setAttribute("position",new THREE.Float32BufferAttribute([],3)),this._geometry.setAttribute("size",new THREE.Float32BufferAttribute([],1)),this._geometry.setAttribute("colour",new THREE.Float32BufferAttribute([],4)),this._geometry.setAttribute("angle",new THREE.Float32BufferAttribute([],1)),this._points=new THREE.Points(this._geometry,this._material),t.parent.add(this._points),this._alphaSpline=new LinearSpline(((t,e,i)=>e+t*(i-e))),this._alphaSpline.AddPoint(0,0),this._alphaSpline.AddPoint(.1,1),this._alphaSpline.AddPoint(.6,1),this._alphaSpline.AddPoint(1,0),this._colourSpline=new LinearSpline(((t,e,i)=>e.clone().lerp(i,t))),this._colourSpline.AddPoint(0,new THREE.Color(16777088)),this._colourSpline.AddPoint(1,new THREE.Color(16744576)),this._sizeSpline=new LinearSpline(((t,e,i)=>e+t*(i-e))),this._sizeSpline.AddPoint(0,3),this._sizeSpline.AddPoint(.3,5),this._sizeSpline.AddPoint(1,.2),document.addEventListener("keyup",(t=>this._onKeyUp(t)),!1),this._UpdateGeometry()}_onKeyUp(t){32===t.keyCode&&this._AddParticles()}_AddParticles(t){this.gdfsghk||(this.gdfsghk=0),this.gdfsghk+=t;const e=Math.floor(150*this.gdfsghk);this.gdfsghk-=e/75;for(let t=0;t<e;t++){const t=.5*(.75*Math.random()+.25);this._particles.push({position:new THREE.Vector3(1*(2*Math.random()-1),1*(2*Math.random()-1),1*(2*Math.random()-1)),size:4*(.5*Math.random()+.5),colour:new THREE.Color,alpha:1,life:t,maxLife:t,rotation:2*Math.random()*Math.PI,velocity:new THREE.Vector3(0,15,0)})}}_UpdateGeometry(){const t=[],e=[],i=[],s=[];for(let n of this._particles)t.push(n.position.x,n.position.y,n.position.z),i.push(n.colour.r,n.colour.g,n.colour.b,n.alpha),e.push(n.currentSize),s.push(n.rotation);this._geometry.setAttribute("position",new THREE.Float32BufferAttribute(t,3)),this._geometry.setAttribute("size",new THREE.Float32BufferAttribute(e,1)),this._geometry.setAttribute("colour",new THREE.Float32BufferAttribute(i,4)),this._geometry.setAttribute("angle",new THREE.Float32BufferAttribute(s,1)),this._geometry.attributes.position.needsUpdate=!0,this._geometry.attributes.size.needsUpdate=!0,this._geometry.attributes.colour.needsUpdate=!0,this._geometry.attributes.angle.needsUpdate=!0}_UpdateParticles(t){for(let e of this._particles)e.life-=t;this._particles=this._particles.filter((t=>t.life>0));for(let e of this._particles){const i=1-e.life/e.maxLife;e.rotation+=.5*t,e.alpha=this._alphaSpline.Get(i),e.currentSize=e.size*this._sizeSpline.Get(i),e.colour.copy(this._colourSpline.Get(i)),e.position.add(e.velocity.clone().multiplyScalar(t));const s=e.velocity.clone();s.multiplyScalar(.1*t),s.x=Math.sign(e.velocity.x)*Math.min(Math.abs(s.x),Math.abs(e.velocity.x)),s.y=Math.sign(e.velocity.y)*Math.min(Math.abs(s.y),Math.abs(e.velocity.y)),s.z=Math.sign(e.velocity.z)*Math.min(Math.abs(s.z),Math.abs(e.velocity.z)),e.velocity.sub(s)}this._particles.sort(((t,e)=>{const i=this._camera.position.distanceTo(t.position),s=this._camera.position.distanceTo(e.position);return i>s?-1:i<s?1:0}))}Step(t){this._AddParticles(t),this._UpdateParticles(t),this._UpdateGeometry()}}class ParticleSystemDemo{constructor(){this._Initialize()}_Initialize(){this._threejs=new THREE.WebGLRenderer({antialias:!0}),this._threejs.shadowMap.enabled=!0,this._threejs.shadowMap.type=THREE.PCFSoftShadowMap,this._threejs.setPixelRatio(window.devicePixelRatio),this._threejs.setSize(window.innerWidth,window.innerHeight),document.body.appendChild(this._threejs.domElement),window.addEventListener("resize",(()=>{this._OnWindowResize()}),!1);const t=sizes.width/sizes.height;this._camera=new THREE.PerspectiveCamera(75,t,.1,1e3),this._camera.position.set(25,10,0),this._scene=new THREE.Scene;let e=new THREE.DirectionalLight(16777215,1);e.position.set(-5,18.5,-20),e.target.position.set(0,0,0),e.castShadow=!0,e.shadow.camera.far=15,this._scene.add(e),gui.add(e,"intensity").min(0).max(10).step(.001).name("dir lightIntensity"),gui.add(e.position,"x").min(-20).max(20).step(.01).name("lightX"),gui.add(e.position,"y").min(-20).max(20).step(.01).name("lightY"),gui.add(e.position,"z").min(-20).max(20).step(.01).name("lightZ");let i=new THREE.AmbientLight(1052688);gui.add(e,"intensity").min(0).max(10).step(.001).name("amb lightIntensity"),this._scene.add(i);const s=new OrbitControls(this._camera,this._threejs.domElement);s.target.set(0,0,0),s.update();const n=(new THREE.CubeTextureLoader).load(["/textures/environmentMaps/white/0.jpg","/textures/environmentMaps/white/0.jpg","/textures/environmentMaps/white/0.jpg","/textures/environmentMaps/white/0.jpg","/textures/environmentMaps/white/0.jpg","/textures/environmentMaps/white/0.jpg"]);this._scene.background=n,this._particles=new ParticleSystem({parent:this._scene,camera:this._camera}),this._LoadModel(),this._previousRAF=null,this._RAF()}_LoadModel(){(new GLTFLoader).load("/models/baba_NEW_v2.glb",(t=>{t.scene.traverse((t=>{t.castShadow=!0})),t.scene.scale.set(3,3,3),t.scene.position.setY(-.7),this._scene.add(t.scene)})),(new GLTFLoader).load("/models/area.glb",(t=>{t.scene.traverse((t=>{t.castShadow=!0})),t.scene.scale.set(3,3,3),t.scene.position.setY(1.2),t.scene.position.setZ(24),this._scene.add(t.scene)}))}_OnWindowResize(){this._camera.aspect=window.innerWidth/window.innerHeight,this._camera.updateProjectionMatrix(),this._threejs.setSize(window.innerWidth,window.innerHeight)}_RAF(){requestAnimationFrame((t=>{null===this._previousRAF&&(this._previousRAF=t),this._RAF(),this._threejs.render(this._scene,this._camera),this._Step(t-this._previousRAF),this._previousRAF=t}))}_Step(t){const e=8e-4*t;this._particles.Step(e)}}let _APP=null;window.addEventListener("DOMContentLoaded",(()=>{_APP=new ParticleSystemDemo}));